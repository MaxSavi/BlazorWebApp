@* @page "/registration"
@inject NavigationManager NavigationManager

<h1>Registration</h1>

@if (registrationError != null)
{
    <p style="color:red;">@registrationError</p>
}

<form @onsubmit="RegisterUser">
    <label>Email:</label><br />
    <input type="email" @bind="email" required /><br />
    <label>Password:</label><br />
    <input type="password" @bind="password" required /><br />
    <button type="submit">Register</button>
</form>

@code {
    private string email;
    private string password;
    private string registrationError;

    private async Task RegisterUser()
    {
        // Здесь должна быть логика регистрации пользователя
        // Например, отправка данных на сервер и сохранение в базе данных
        // Для примера, просто перенаправим пользователя на страницу входа после регистрации
        NavigationManager.NavigateTo("/login");
    }
} *@

@* @page "/Error"
    @using System.Diagnostics

<PageTitle>Error</PageTitle>

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

@code{
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? RequestId { get; set; }
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized() =>
        RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
}
 *@

@* @page "/registration"
@using BlazorWebApp.Models
@inject AuthService AuthService
@inject NavigationManager Navigation

<h1>Регистрация</h1>

@if (ErrorMessage != null)
{
    <p style="color: red;">@ErrorMessage</p>
}

<EditForm Model="@UserModel" OnValidSubmit="RegisterUser" formname="RegistrationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="username">Имя пользователя:</label>
    <InputText id="username" @bind-Value="UserModel.Username" />
    <ValidationMessage For="@(() => UserModel.Username)" />

    <label for="password">Пароль:</label>
    <InputText id="password" @bind-Value="UserModel.Password" type="password" />
    <ValidationMessage For="@(() => UserModel.Password)" />

    <button type="submit">Зарегистрироваться</button>
</EditForm>

@code {
    private string username;
    private string password;

    // Метод регистрации пользователя
    private async Task RegisterUser()
    {
        var success = await AuthService.RegisterUserAsync(username, password);
        if (success)
            Navigation.NavigateTo("/login");
        else
            ErrorMessage = "Пользователь с таким именем уже существует";
    }
    private string ErrorMessage { get; set; }
    private UserModel UserModel { get; set; } = new UserModel();

    // private async Task RegisterUser()
    // {
    //     var success = await AuthService.RegisterUserAsync(UserModel);
    //     if (success)
    //         Navigation.NavigateTo("/login");
    //     else
    //         ErrorMessage = "Пользователь с таким именем уже существует";
    // }
}
 *@

@page "/registration"
@rendermode InteractiveServer
@using BlazorWebApp.Models
@inject AuthService AuthService
@inject NavigationManager Navigation

<h1>Регистрация</h1>

@if (ErrorMessage != null)
{
    <p style="color: red;">@ErrorMessage</p>
}
@* <input type="password" @bind="UserModel.Password" /> *@
<label for="username">Имя пользователя:</label>
<InputText id="username" @bind-Value="UserModel.Username" />
<EditForm Model="@UserModel" OnValidSubmit="RegisterUser" formname="RegistrationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @* <label for="username">Имя пользователя:</label>
    <InputText id="username" @bind-Value="UserModel.Username" /> *@
    <ValidationMessage For="@(() => UserModel.Username)" />

    <label for="password">Пароль:</label>
    <input type="password" @bind="UserModel.Password"/>
    <ValidationMessage For="@(() => UserModel.Password)" />

    <button type="submit">Зарегистрироваться</button>
</EditForm>

@code {
    private string ErrorMessage { get; set; }
    private UserModel UserModel { get; set; } = new UserModel();

    // Метод регистрации пользователя
    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(UserModel.Username) || string.IsNullOrEmpty(UserModel.Password))
        {
            ErrorMessage = "Имя пользователя и пароль обязательны для заполнения";
            return;
        }

        var success = await AuthService.RegisterUserAsync(UserModel.Username, UserModel.Password);
        if (success)
            Navigation.NavigateTo("/login");
        else
            ErrorMessage = "Пользователь с таким именем уже существует";
    }
}
